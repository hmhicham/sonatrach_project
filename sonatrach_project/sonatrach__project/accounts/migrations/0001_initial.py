# Generated by Django 5.1.7 on 2025-04-15 11:50

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bassin',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
                ('asset', models.CharField(choices=[('ASN', 'Asset nord'), ('ASC', 'Asset centre'), ('ASO', 'Asset ouest'), ('ASE', 'Asset est')], default='UNKNOWN', max_length=15)),
                ('area', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('age_basal', models.CharField(db_comment='L’âge de formation initiale', max_length=100)),
                ('age_sup', models.CharField(db_comment='L’âge le plus récent des dépôts', max_length=100)),
                ('color_hex', models.CharField(max_length=10)),
                ('play', models.CharField()),
                ('plate_loca', models.CharField(db_comment='tectonic plate setting')),
            ],
            options={
                'db_table': 't_bassins',
            },
        ),
        migrations.CreateModel(
            name='Bloc',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
            ],
            options={
                'db_table': 't_blocs',
            },
        ),
        migrations.CreateModel(
            name='Departement',
            fields=[
                ('id', models.CharField(max_length=70, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
                ('asset', models.CharField(choices=[('ASN', 'Asset nord'), ('ASC', 'Asset centre'), ('ASO', 'Asset ouest'), ('ASE', 'Asset est')], default='UNKNOWN', max_length=15)),
            ],
            options={
                'db_table': 't_depts',
            },
        ),
        migrations.CreateModel(
            name='InstallationSurface',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('sigle', models.CharField(blank=True, max_length=25, unique=True)),
                ('coords', models.CharField(max_length=255, null=True)),
                ('objective', models.CharField(blank=True, choices=[('separation', 'Separation Unit'), ('compression', 'Compression Station'), ('storage', 'Storage Facility'), ('pipeline', 'Pipeline Network'), ('flare', 'Flare System')], max_length=100)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('fluid', models.CharField(blank=True, choices=[('Gaz', 'Gaz'), ('Huile', 'Huile')], max_length=100)),
                ('capacity', models.FloatField(help_text='Capacity in barrels or cubic meters', null=True)),
                ('company', models.CharField(blank=True, db_comment='société de réalisation', max_length=100)),
                ('commissioning_date', models.SmallIntegerField(db_comment='année de mise en service', null=True)),
                ('status', models.CharField(choices=[('EN SERVICE,', 'EN SERVICE'), ('HORS SERVICE', 'HORS SERVICE')], default='active', max_length=50, null=True)),
            ],
            options={
                'db_table': 'installationSurface',
            },
        ),
        migrations.CreateModel(
            name='Surface',
            fields=[
                ('id', models.CharField(max_length=70, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
                ('type', models.CharField(choices=[('POD', 'POD'), ('SP', 'Surface prorogée')], default='UNKNOWN', max_length=15)),
                ('carto_area', models.DecimalField(decimal_places=2, max_digits=10)),
                ('validated_area', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('validated', models.BooleanField()),
            ],
            options={
                'db_table': 't_surface',
            },
        ),
        migrations.CreateModel(
            name='Wilaya',
            fields=[
                ('code', models.CharField(max_length=2, unique=True)),
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
            ],
            options={
                'db_table': 't_wilaya',
            },
        ),
        migrations.CreateModel(
            name='Concession',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('classification', models.CharField(choices=[('Near field emergeant', 'Near field emergeant'), ('Near field mature', 'Near field mature'), ('Frontier emergeant', 'Frontier emergeant'), ('Frontier mature', 'Frontier mature')], max_length=255, null=True)),
                ('init_area', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('distance', models.DecimalField(db_comment='distance aux infrastructures et CPF', decimal_places=2, max_digits=10, null=True)),
                ('zones_fisc', models.CharField(max_length=25, null=True)),
                ('status', models.CharField(choices=[('Contrat de recherche', 'Contrat de recherche'), ('ACPO', 'Acte de Prospection 05.07'), ('ACPN', 'Acte de Prospection 19.13'), ('Concession Amont', 'Concession Amont')], max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('coords', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('operator', models.CharField(blank=True, max_length=50)),
                ('bassin', models.ManyToManyField(blank=True, null=True, to='accounts.bassin')),
                ('blocks', models.ManyToManyField(blank=True, to='accounts.bloc')),
                ('linked_prms', models.ManyToManyField(blank=True, to='accounts.concession')),
                ('dept', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deptconcession', to='accounts.departement')),
                ('wilaya', models.ManyToManyField(blank=True, to='accounts.wilaya')),
            ],
            options={
                'db_table': 't_perimetres',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('num', models.CharField(db_comment='numéro du contrat', max_length=100, primary_key=True, serialize=False)),
                ('sign_date', models.DateField(db_comment='date de signature du contrat')),
                ('vig_date', models.DateField(db_comment='date d entrée en vigueur du contrat')),
                ('ech_date', models.DateField(db_comment='date d échéance du contrat')),
                ('situation', models.CharField(choices=[('EC', 'En cours de traitement'), ('EV', 'En vigueur'), ('Ec', 'Echu'), ('Ecs', 'Echu avec surfaces prorogées')], db_comment='situation contractuelle', null=True)),
                ('status', models.CharField(choices=[('DAA', 'Déposé attente approbation'), ('AP', 'Approuvé'), ('APR', 'Approuvé avec réserves'), ('ECAP', "En cours d'approbation"), ('NPL', 'Non approuvé libre'), ('GE', 'Gisement en exploitation')], db_comment='statut vis à vis ALNAFT', null=True)),
                ('phase_nb', models.IntegerField(db_comment='nombre de phases')),
                ('prm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_prm', to='accounts.concession', unique=True)),
            ],
            options={
                'db_table': 't_contracts',
            },
        ),
        migrations.CreateModel(
            name='CtrStatusLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('previous_status', models.CharField(null=True)),
                ('new_status', models.CharField()),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('changed_by', models.ForeignKey(db_column='changed_by_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='username')),
                ('ctr', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ctr', to='accounts.contract')),
            ],
            options={
                'db_table': 't_ctrlogs',
            },
        ),
        migrations.CreateModel(
            name='Manifold',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('coords', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=50)),
                ('number_of_inputs', models.IntegerField(help_text='Number of input wells')),
                ('number_of_outputs', models.IntegerField(help_text='Number of output pipelines')),
                ('max_pressure', models.FloatField(help_text='Maximum operating pressure in bar or psi')),
                ('commissioning_date', models.DateField(blank=True, null=True)),
                ('installation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manifolds', to='accounts.installationsurface')),
            ],
            options={
                'db_table': 'manifold',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.CharField()),
                ('read', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('PP', 'Passage de phase'), ('EXPCTR', 'Expiration de contrat'), ('AUTH', 'Expiration du mot de passe')], default='UNKNOWN', max_length=15)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('deadline', models.PositiveIntegerField(db_comment='nombre de jours avant event', default=0)),
                ('target', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 't_notifications',
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Phase 1', 'Phase 1'), ('Phase 2', 'Phase 2'), ('Phase 3', 'Phase 3')])),
                ('duration', models.SmallIntegerField()),
                ('start_date', models.DateField(db_comment='date de début de phase')),
                ('end_date', models.DateField(db_comment='date accord de passage de phase EL NAFT')),
                ('contract_pct', models.DecimalField(db_comment='pourcentage contractuel de la superficie rendue', decimal_places=2, default=30.0, max_digits=5)),
                ('actual_pct', models.DecimalField(db_comment='pourcentage réel de la superficie rendue', decimal_places=2, max_digits=10, null=True)),
                ('surface_rendu', django.contrib.gis.db.models.fields.MultiPolygonField(db_comment='represente la surface rendue à la fin de la phase', null=True, srid=4326)),
                ('rem_2d', models.IntegerField(default=0)),
                ('rem_3d', models.IntegerField(default=0)),
                ('rem_wc', models.SmallIntegerField(default=0)),
                ('rem_d', models.SmallIntegerField(default=0)),
                ('rem_gg', models.SmallIntegerField(default=0)),
                ('ctr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_phs', to='accounts.contract')),
            ],
            options={
                'db_table': 't_phases',
            },
        ),
        migrations.CreateModel(
            name='GgStudies',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('start_date', models.DateField(db_comment='date de début de réalisation')),
                ('end_date', models.DateField(db_comment='date de fin de réalisation')),
                ('company', models.CharField(max_length=30)),
                ('cost', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('prm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='realisations_gg', to='accounts.concession')),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.phase')),
            ],
            options={
                'db_table': 't_gg_realisation',
            },
        ),
        migrations.CreateModel(
            name='Demande',
            fields=[
                ('num', models.CharField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Av', 'Avenant'), ('D', 'Demande')], default='Demande')),
                ('has_ts', models.BooleanField(db_comment='la demande de passage de phase inclut des TS', default=False)),
                ('accord', models.BooleanField(db_comment='la demande a été accordée', default=False)),
                ('date_envoi', models.DateField()),
                ('document_dem', models.BinaryField()),
                ('dem_filename', models.CharField()),
                ('resp_num', models.CharField()),
                ('date_resp', models.DateField()),
                ('resp_filename', models.CharField()),
                ('document_resp', models.BinaryField()),
                ('motif', models.CharField(choices=[('ACP', 'Accord de passage de phase'), ('ASL', 'Adjonction de surfaces libres'), ('PSD', 'Prorogation de surfaces de découvertes'), ('ING', 'Integration des niveaux géologiques'), ('EPP', 'Extension de la période de prorogation'), ('ISDL', 'Intégration de surfaces de découvertes libres'), ('RPTAP', "Réalisation physique de travaux d'engagement par anticipation sur une phase"), ('EPC', 'Extension de la période contractuelle'), ('CACRC', "Conclusion d'accord d'un nouveau contrat R&E ou d'une concession Amont")])),
                ('ctr', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='demande_ctr', to='accounts.contract')),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='demande_phs', to='accounts.phase')),
            ],
            options={
                'db_table': 't_demande',
            },
        ),
        migrations.CreateModel(
            name='Commitement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type_commit', models.CharField(choices=[('EI', 'Engagement initial'), ('TS', 'Travaux sup')], db_comment="type de l'engagement", default='EI', max_length=10)),
                ('s2d_acq', models.DecimalField(db_comment='Km', decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('s3d_acq', models.DecimalField(db_comment='Km2', decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('well_d', models.PositiveIntegerField(db_comment='nombre de puits délin', default=0)),
                ('well_wc', models.PositiveIntegerField(db_comment='nombre de puits wildcut', default=0)),
                ('well_app', models.PositiveIntegerField(db_comment='nombre de puits d appréciation', default=0)),
                ('well_test', models.PositiveIntegerField(db_comment='nombre de puits à tester', default=0)),
                ('gg_studies', models.PositiveIntegerField(db_comment='nombre etude G&G', default=0)),
                ('workover', models.PositiveIntegerField(db_comment='nombre WO', default=0)),
                ('frac_acid', models.PositiveIntegerField(db_comment='fracturation et acidification (Nombre puits) ', default=0)),
                ('gravimetry_acquisition', models.PositiveIntegerField(default=0)),
                ('gravimetry_treatment', models.PositiveIntegerField(default=0)),
                ('retraitement_2d', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('retraitement_3d', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('cost_s2d_acq', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_s3d_acq', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_well_d', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_well_wc', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_well_app', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_well_tst', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_gg_studies', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_gravimetry_acquisition', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_gravimetry_treatment', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_wo', models.DecimalField(db_comment='cout workover', decimal_places=2, default=0.0, max_digits=15)),
                ('cost_frac_acid', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_retraitement_2d', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('cost_retraitement_3d', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('phase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagementphs', to='accounts.phase')),
            ],
            options={
                'db_table': 't_commitement',
            },
        ),
        migrations.CreateModel(
            name='PMT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('measure', models.CharField(choices=[('wildcat_forés', 'Nombre de puits Forés - Wildcat'), ('delineation_forés', 'Nombre de puits Forés - Délinéation'), ('wildcat_terminés', 'Nombre de puits Terminés - Wildcat'), ('delineation_terminés', 'Nombre de puits Terminés - Délinéation'), ('métrage', 'Métrage'), ('mois_appareils', 'Mois-appareils'), ('mois_equipes_2d', 'Mois-équipes 2D'), ('points_vibrés_2d', 'Points vibrés 2D'), ('km_profil_2d', 'Km-profil 2D'), ('traitement_2d', 'Traitement 2D'), ('retraitement_2d', 'Retraitement 2D'), ('mois_equipes_3d', 'Mois-équipes 3D'), ('points_vibrés_3d', 'Points vibrés 3D'), ('km2_profil_3d', 'Km²-profil 3D'), ('traitement_3d', 'Traitement 3D'), ('retraitement_3d', 'Retraitement 3D'), ('geologie_terrain', 'Géologie de terrain (mois-ingénieurs)'), ('travaux_synthese', 'Travaux de synthèse (mois-ingénieurs)'), ('gravimetrie', 'Gravimétrie (mois-ingénieurs)'), ('aero_magnetometrie', 'Aero-magnetometrie (Km)'), ('frac_work_over', 'Fracturation + work over'), ('core_drill', 'Core drilling')], db_comment='This field represents the activity-related measure.', max_length=100)),
                ('value', models.PositiveBigIntegerField(default=None)),
                ('prm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prmpmt', to='accounts.concession')),
            ],
            options={
                'db_table': 'pmt',
            },
        ),
        migrations.CreateModel(
            name='Seismic',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('start_date', models.DateField(db_comment='date de début de réalisation', null=True)),
                ('end_date', models.DateField(blank=True, db_comment='date de fin de réalisation', null=True)),
                ('company', models.CharField(db_comment='les réalisateurs', max_length=30, null=True)),
                ('operator', models.CharField(max_length=30, null=True)),
                ('kilometrage', models.FloatField(null=True)),
                ('cost', models.PositiveIntegerField(default=0)),
                ('type', models.CharField(choices=[('2D', 'Etude sismique 2D'), ('3D', 'Etude sismique 3D')])),
                ('activity', models.CharField(choices=[('Acq', 'Acquisition'), ('Tr', 'Traitement'), ('Retr', 'Retraitement')], default='Acq')),
                ('coords', django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326)),
                ('datum', models.CharField(max_length=100, null=True)),
                ('ellipsoid', models.CharField(max_length=100, null=True)),
                ('notes', models.TextField(blank=True)),
                ('offshore', models.BooleanField(default=False)),
                ('data_quality', models.CharField(max_length=30, null=True)),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.phase')),
                ('prm', models.ForeignKey(default='test_7654', on_delete=django.db.models.deletion.CASCADE, related_name='realisations', to='accounts.concession')),
                ('wilaya', models.ManyToManyField(null=True, to='accounts.wilaya')),
            ],
            options={
                'db_table': 't_sis_realisation',
            },
        ),
        migrations.CreateModel(
            name='SeismicActivityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField()),
                ('kilometers', models.DecimalField(decimal_places=2, max_digits=10)),
                ('seismic_points', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sis_report', to='accounts.seismic')),
            ],
        ),
        migrations.CreateModel(
            name='SeismicLine',
            fields=[
                ('id', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('coords', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
                ('seismic_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='accounts.seismic')),
            ],
        ),
        migrations.CreateModel(
            name='SeisMonthlyPrevisions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.SmallIntegerField()),
                ('year', models.PositiveSmallIntegerField()),
                ('pv', models.BigIntegerField(default=0)),
                ('meq', models.FloatField(default=0.0)),
                ('kilometrage_prev', models.BigIntegerField(default=0)),
                ('cost_sci', models.BigIntegerField(db_comment='cout valorisé en KDA SCI', default=0)),
                ('cost_ci', models.BigIntegerField(db_comment='cout valorisé en KDA avec CI', default=0)),
                ('sisProg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sisprevisions', to='accounts.seismic')),
            ],
            options={
                'db_table': 'sisPrevisions',
            },
        ),
        migrations.CreateModel(
            name='ToRealise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s2d', models.PositiveIntegerField(db_comment='kilometrage 2D')),
                ('s3d', models.PositiveIntegerField(db_comment='kilometrage 3D')),
                ('well_d', models.PositiveIntegerField(db_comment='nombre de puits délin')),
                ('well_wc', models.PositiveIntegerField(db_comment='nombre de puits wildcut')),
                ('gg_studies', models.PositiveIntegerField(db_comment='nombre etude G&G', default=0)),
                ('phs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phsrr', to='accounts.phase')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=255)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.CharField(choices=[('INSERT', 'Insert'), ('UPDATE', 'Update'), ('DELETE', 'Delete')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('changes', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transaction_log',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                ('sigle', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True, unique=True)),
                ('coords', django.contrib.gis.db.models.fields.MultiPointField(null=True, srid=4326)),
                ('total_depth', models.FloatField(null=True)),
                ('zsol', models.PositiveIntegerField(null=True)),
                ('rig', models.CharField(null=True)),
                ('type', models.CharField(choices=[('W', "Puits d'exploration"), ('D', 'Puits de délinéation'), ('Dev', 'Puits de développement'), ('S', 'Statigraphique')], null=True)),
                ('state', models.CharField(blank=True, choices=[('BE', 'Branché en exploitation'), ('CB', 'Complété et Branché'), ('CFP', 'Complété en Fermeture Provisoire'), ('AP', 'Abondon Provisoire'), ('AD', 'Abondon définitif')], null=True)),
                ('start_date', models.DateField(db_comment='date de début de réalisation', null=True)),
                ('end_date', models.DateField(blank=True, db_comment='date de fin de réalisation', null=True)),
                ('objective', models.CharField(max_length=500, null=True)),
                ('result', models.CharField(blank=True, choices=[('+', 'Positif'), ('-', 'Négatif'), ('Dec', 'Découverte')], null=True)),
                ('offshore', models.BooleanField(default=False)),
                ('cost', models.FloatField(null=True)),
                ('client', models.CharField(default='Sonatrach', max_length=30, null=True)),
                ('company', models.CharField(db_comment='entreprise de forage', max_length=30, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('npt', models.SmallIntegerField(db_comment='Non productive time en jours', default=0)),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.phase')),
                ('prm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='puits', to='accounts.concession')),
            ],
            options={
                'db_table': 't_Well',
            },
        ),
        migrations.CreateModel(
            name='Fracturation',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('start_date', models.DateField(db_comment='date de début de réalisation')),
                ('end_date', models.DateField(db_comment='date de fin de réalisation')),
                ('company', models.CharField(max_length=30)),
                ('cost', models.PositiveIntegerField(default=0)),
                ('init_rate', models.PositiveIntegerField(db_comment='débit initial', default=0)),
                ('fin_rate', models.PositiveIntegerField(db_comment='débit final', default=0)),
                ('reservoirs', models.CharField(max_length=30, null=True)),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.phase')),
                ('well', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frac', to='accounts.well')),
            ],
            options={
                'db_table': 't_frac',
            },
        ),
        migrations.CreateModel(
            name='DrillMonthlyPrevisions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.SmallIntegerField()),
                ('year', models.PositiveSmallIntegerField()),
                ('metrage', models.FloatField(default=0.0)),
                ('mapp', models.FloatField(default=0.0)),
                ('cost', models.FloatField(default=0.0)),
                ('wellProg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wellprevisions', to='accounts.well')),
            ],
            options={
                'db_table': 'wellPrevisions',
            },
        ),
        migrations.CreateModel(
            name='WellReservoirFluid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fluid', models.CharField(choices=[('H', 'Huile'), ('G', 'Gaz'), ('C', 'Condensat'), ('GA', 'Gaz associé')])),
                ('reservoir', models.CharField()),
                ('reservoir_unit', models.CharField(help_text='Reservoir formation (e.g., Devonien F6, C3)', max_length=50)),
                ('discovery_year', models.SmallIntegerField()),
                ('status', models.CharField(choices=[('D', 'Découverte'), ('MHC', "Mise en évidence D'HC")], max_length=10)),
                ('nature', models.CharField(choices=[('DT', 'Délinéations & travaux'), ('TP', 'Transfert proposé'), ('NT', 'Non transférable'), ('T', 'Transférable'), ('D', 'Découverte'), ('DL', 'Délinéations'), ('A', 'Additif')], max_length=50)),
                ('well', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.well')),
            ],
            options={
                'verbose_name': 'Well reservoir ',
                'verbose_name_plural': 'Well reservoir ',
                'db_table': 'well_reservoir',
            },
        ),
        migrations.CreateModel(
            name='ReserveEstimation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proved', models.FloatField(help_text='Proved reserves (P1)')),
                ('probable', models.FloatField(help_text='Probable reserves (P2)')),
                ('possible', models.FloatField(help_text='Possible reserves (P3)')),
                ('estimation_date', models.DateTimeField(auto_now_add=True, help_text='Date of estimation')),
                ('estimator', models.CharField(help_text='Person or department responsible for estimation', max_length=100)),
                ('comments', models.TextField(blank=True, help_text='Additional details about the estimation', null=True)),
                ('well_fluid_reservoir', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='estimations', to='accounts.wellreservoirfluid')),
            ],
            options={
                'verbose_name': 'Well reservoir vol ',
                'verbose_name_plural': 'Well reservoir vol',
                'db_table': 'well_reservoir_vol',
            },
        ),
        migrations.AddConstraint(
            model_name='contract',
            constraint=models.UniqueConstraint(fields=('num', 'prm'), name='unique_ctr'),
        ),
        migrations.AddConstraint(
            model_name='phase',
            constraint=models.UniqueConstraint(fields=('name', 'ctr'), name='unique_phases'),
        ),
        migrations.AlterUniqueTogether(
            name='commitement',
            unique_together={('phase', 'type_commit')},
        ),
        migrations.AlterUniqueTogether(
            name='pmt',
            unique_together={('prm', 'year', 'measure')},
        ),
        migrations.AlterUniqueTogether(
            name='seismonthlyprevisions',
            unique_together={('sisProg', 'year', 'month')},
        ),
        migrations.AlterUniqueTogether(
            name='drillmonthlyprevisions',
            unique_together={('wellProg', 'year', 'month')},
        ),
        migrations.AlterUniqueTogether(
            name='wellreservoirfluid',
            unique_together={('well', 'fluid')},
        ),
    ]
